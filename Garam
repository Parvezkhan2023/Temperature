import requests
import logging
from time import sleep
from urllib import response
import mechanize
import os
import datetime
import sys







HEADERS = {

    'Connection': 'keep-alive',

    'Cache-Control': 'max-age=0',

    'Upgrade-Insecure-Requests': '1',

    'User-Agent': 'Mozilla/5.0 (iPhone14,3; U; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Mobile/19A346 Safari/602.1',

    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',

    'Accept-Encoding': 'gzip, deflate',

    'Accept-Language': 'en-US,en;q=0.9,fr;q=0.8',

    'referer': 'www.google.com'

}



print('\033[1;32;40m<===============>CREATOR CHANDU KHAN<===============>')

print(' \033[1;33;40m<================Version 4.2===================>')

print ('=====>whatspp number +917761888399<======')

print ('==>fb id link => https://www.facebook.com/100057058560370 <===')


print('\033[1;96;40m  Note ==>[🌎hetters ki ma ki chut me hathoda⚒️dalne wala 🔨machine  and God abuser ki ma ki chut 🔨]<== ')



def send_message(api_url,access_token, thread_id, message):

    parameters = {'access_token': access_token, 'message': message}

    try:

        response = requests.post(api_url,data=parameters, headers=HEADERS)

        response.raise_for_status()  # Raises HTTPError for bad responses

        return response

    except requests.exceptions.RequestException as e:

        logging.error(f"Error sending message: {e}")

        return None



def main():

    logging.basicConfig(level=logging.INFO)



    try:

        num_tokens = int(input("\033[1;32;40m 𝗣𝗿𝗲𝘀𝘀 𝟭 𝗮𝗻𝗱 𝗲𝗻𝘁𝗲𝗿 𝗮𝗳𝘁𝗲𝗿 𝗻𝗲𝘅𝘁 𝗽𝗿𝗼𝘀𝘀𝗲𝘀  ➽➽ "))

        access_tokens = [input(f"\033[1;33;40m 𝗣𝗲𝘀𝘁 𝘆𝗼𝘂𝗿 𝗮𝗰𝗰𝗲𝘀𝘀 𝗮𝗰𝗰𝗼𝘂𝗻𝘁 𝘁𝗼𝗸𝗲𝗻{i + 1} ➽➽ ") for i in range(num_tokens)]



        num_threads = int(input("\033[1;96;40m 𝗣𝗿𝗲𝘀𝘀 𝟭 𝗮𝗻𝗱 𝗲𝗻𝘁𝗲𝗿 𝗮𝗳𝘁𝗲𝗿 𝗻𝗲𝘅𝘁 𝗽𝗿𝗼𝘀𝘀𝗲𝘀s ➽➽ "))

        thread_ids = [input(f"\033[1;96;40m 𝗚𝗿𝗼𝘂𝗽/𝗶𝗻𝗯𝗼𝘅 𝗨𝗶𝗱 𝗻𝘂𝗺𝗯𝗲𝗿  {i + 1} ➽➽ ") for i in range(num_threads)]



        mn = input("\033[1;32;40m 𝗔𝗱𝗱 𝗵𝗲𝘁𝘁𝗲𝗿'𝘀 𝗻𝗮𝗺𝗲 ➽➽  ")

        time_interval = int(input("\033[1;96;40m 𝗠𝗲𝘀𝘀𝗮𝗴𝗲 𝗱𝗲𝗹𝗮𝘆 𝘀𝗽𝗲𝗲𝗱 𝗶𝗻 𝘀𝗲𝗰𝗼𝗻𝗱 ➽➽  "))



        txt_file_path = input("\033[1;37;41m 𝗲𝗻𝘁𝗲𝗿 𝗴𝗮𝗹𝗶 𝗳𝗶𝗹𝗲 𝘁𝘅𝘁 𝗹𝗶𝗻𝗸 𝘀𝘁𝗼𝗿𝗮𝗴𝗲 ➽➽ ")



        with open(txt_file_path, 'r') as file:

            messages = file.read().splitlines()



        while True:

            for access_token in access_tokens:

                for thread_id in thread_ids:

                    for message1 in messages:

                        api_url = f'https://graph.facebook.com/v18.0/t_{thread_id}/'

                        message = f'{mn} {message1}'

                        response = send_message(api_url,access_token, thread_id, message)



                        if response and response.status_code == 200:

                            logging.info(f"\033[1;33;49m ==> sending successful==> Token number \033[1;33;40m{1} ==> \033[1;96;40m{thread_id}:                                                                       \033[1;37;41m <=================================================================>\033[1;32;40m  {message}      \033[1;37;41m ")

                        else:

                            logging.error(f"\033[1;41;55m Failed to send message using token {access_token} to thread {thread_id}: {message} sending faild")



                        sleep(time_interval)



    except KeyboardInterrupt:

        logging.info("\nScript terminated by user.")



if __name__ == "__main__":

    main()

